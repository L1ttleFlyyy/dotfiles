#!/bin/bash
TTYD_PORT=7681
CHECK_INTERVAL=15
INTERFACE="wlp1s0"

log_msg() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
}

# Handle script termination gracefully
cleanup() {
    log_msg "Script terminating, restoring power save to 'on'"
    sudo iw dev "$INTERFACE" set power_save on 2>/dev/null
    exit 0
}

trap cleanup SIGTERM SIGINT

# Verify WiFi interface exists before starting
if ! iw dev "$INTERFACE" info >/dev/null 2>&1; then
    log_msg "ERROR: WiFi interface $INTERFACE not found"
    exit 1
fi

# Verify sudo access works
if ! sudo -n iw dev "$INTERFACE" get power_save >/dev/null 2>&1; then
    log_msg "ERROR: Cannot execute 'sudo iw' command. Check sudoers configuration."
    exit 1
fi

log_msg "WiFi Smart Power Manager starting"

while true; do
    ACTIVE_CONN=$(netstat -tn 2>/dev/null | grep ":$TTYD_PORT.*ESTABLISHED" | wc -l)

    CURRENT_POWER_SAVE=$(iw dev "$INTERFACE" get power_save 2>/dev/null | grep -o "on\|off")

    if [ -z "$CURRENT_POWER_SAVE" ]; then
        log_msg "ERROR: Cannot get power save state for interface $INTERFACE"
        sleep "$CHECK_INTERVAL"
        continue
    fi

    if [ "$ACTIVE_CONN" -gt 0 ] && [ "$CURRENT_POWER_SAVE" = "on" ]; then
        if sudo iw dev "$INTERFACE" set power_save off 2>/dev/null; then
            log_msg "TTYd active ($ACTIVE_CONN connections) - WiFi power save OFF"
        else
            log_msg "ERROR: Failed to disable WiFi power save"
        fi
    elif [ "$ACTIVE_CONN" -eq 0 ] && [ "$CURRENT_POWER_SAVE" = "off" ]; then
        if sudo iw dev "$INTERFACE" set power_save on 2>/dev/null; then
            log_msg "TTYd inactive - WiFi power save ON"
        else
            log_msg "ERROR: Failed to enable WiFi power save"
        fi
    fi

    sleep "$CHECK_INTERVAL"
done
