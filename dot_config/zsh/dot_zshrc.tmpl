# vim: ft=zsh
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# =============================================================
#                       Homebrew
# =============================================================
{{- if eq .chezmoi.os "darwin" }}
[[ -x "/opt/homebrew/bin/brew" ]] && eval "$(/opt/homebrew/bin/brew shellenv)"
{{- end }}
{{- if eq .chezmoi.os "linux" }}
[[ -x "/home/linuxbrew/.linuxbrew/bin/brew" ]] && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
{{- end }}
BREW_CMP_DIR="$(brew --prefix)/share/zsh/site-functions"
FPATH="${BREW_CMP_DIR}:${FPATH}"
export HOMEBREW_NO_ANALYTICS=1
{{- if eq .chezmoi.os "darwin" }}
# MACOS tweak
export HOMEBREW_CASK_OPTS="--appdir=/Applications --fontdir=/Library/Fonts"
{{- end }}
{{- if eq .chezmoi.os "darwin" }}
if [[ "$(stat -f '%Su' ${BREW_CMP_DIR})" != "${USER}" ]]; then
{{- else }}
if [[ "$(stat --format '%U' ${BREW_CMP_DIR})" != "${USER}" ]]; then
{{- end }}
    ZSH_COMPINIT_OPTS="-u"
fi
unset BREW_CMP_DIR

# =============================================================
#                   Zsh State Management
# =============================================================
# Interactive shell settings
export SHELL_SESSIONS_DISABLE=1
mkdir -p $HOME/.local/state/less
mkdir -p $HOME/.local/state/zsh

export LESSHISTFILE="$HOME/.local/state/less/history"
export HISTFILE="$HOME/.local/state/zsh/history"
export SAVEHIST=10000
export HISTSIZE=10000

# =============================================================
#                       FZF Config
# =============================================================

# global ignnore file is $HOME/.config/fd/ignore
export FZF_DEFAULT_COMMAND="fd --type file --follow --hidden"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="fd --type dir --follow --hidden"

export FZF_DEFAULT_OPTS='--tmux=70% --reverse --border --pointer=">"'
# export FZF_CTRL_T_OPTS='--preview "bat --color=always {}"'
export FZF_ALT_C_OPTS='--preview "tree -C -a -d -L 2 {}"'

# rg config
export RIPGREP_CONFIG_PATH="$HOME/.config/rg/ripgreprc"

# =============================================================
#                      Zinit Setup
# =============================================================
# Configure zinit paths
declare -A ZINIT
ZINIT[ZCOMPDUMP_PATH]="$ZDOTDIR/.zcompdump"

# Install zinit if not present
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
[[ ! -d $ZINIT_HOME ]] && mkdir -p "$(dirname $ZINIT_HOME)"
[[ ! -d $ZINIT_HOME/.git ]] && git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
source "${ZINIT_HOME}/zinit.zsh"

# Load OMZ Git library (for theme compatibility)
zinit snippet OMZL::git.zsh
zinit snippet OMZL::key-bindings.zsh

# Completions - use blockf to prevent fpath pollution
zinit ice blockf; zinit light zsh-users/zsh-completions

zinit light Aloxaf/fzf-tab

# These need to be after fzf-tab
zinit light zsh-users/zsh-autosuggestions
zinit light zsh-users/zsh-syntax-highlighting

# Theme
zinit ice depth=1; zinit light romkatv/powerlevel10k

# Initialize completions
autoload -Uz compinit
compinit $ZSH_COMPINIT_OPTS
zinit cdreplay -q  # replay compdefs

unset ZSH_COMPINIT_OPTS

# FZF keybindings: must be after fzf-tab
source <(fzf --zsh) 

# =============================================================
#                       fzf-tab config
# =============================================================

# fzf-tab setup
setopt globdots
zstyle ':fzf-tab:complete:cd:*'             fzf-preview                       'tree -C -a -d -L 2 $realpath'
zstyle ':fzf-tab:complete:*:directories'    fzf-preview                       'tree -C -a -d -L 2 $realpath'
zstyle ':fzf-tab:complete:*:*files'         fzf-preview '[[ -d $realpath ]] && tree -C -a -d -L 2 $realpath'
zstyle ':fzf-tab:complete:*:argument-rest'  fzf-preview '[[ -d $realpath ]] && tree -C -a -d -L 2 $realpath'

zstyle ':fzf-tab:*' fzf-flags '--pointer=>'
zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup
zstyle ':fzf-tab:*' popup-min-size 120 10

# =============================================================
#                       Color theme
# =============================================================

# apply-theme quick-cmd
source $HOME/.config/colortheme/apply-theme.sh && __apply_theme_for_rc;
alias apply-theme="__apply_theme_all"

# =============================================================
#                      User Aliases
# =============================================================

# Set EDITOR
export EDITOR=nvim
export SYSTEMD_EDITOR=nvim
export SUDO_EDITOR=nvim
{{- if ne .chezmoi.os "darwin" }}
sudo_edit() {
    [[ -z "$1" ]] && { echo "Usage: sudo_edit <file>"; return 1; }
    local file="$1"
    local tmp_file="/tmp/sudo_edit_$(basename "$file")_$$"
    sudo cat "$file" > "$tmp_file" 2>/dev/null || touch "$tmp_file"

    $EDITOR "$tmp_file"

    if ! sudo diff -q "$file" "$tmp_file" &> /dev/null ; then
        sudo tee "$file" < "$tmp_file" > /dev/null
        echo "File $file updated"
    else
        echo "No changes made"
    fi
    rm -f "$tmp_file"
}
{{- end }}

# MANPAGER
export MANPAGER="nvim +Man!"

# Source custom aliases
source "$ZDOTDIR/alias.zsh"

{{- if eq .chezmoi.hostname "bazzite" }}
# =============================================================
#                      WiFi Smart Initialization
# =============================================================
# WiFi Smart Power Management Hook
wifi_smart_init() {
    local TTYD_PORT=7681
    local INTERFACE="wlp1s0"
    local DAEMON_SCRIPT="$HOME/bin/wifi-smart-daemon"
    if netstat -tn 2>/dev/null | grep -q ":$TTYD_PORT.*ESTABLISHED"; then
        local WIFI_STATUS=$(iw dev "$INTERFACE" get power_save 2>/dev/null | grep -o "on\|off")
        if [[ "$WIFI_STATUS" != "off" ]]; then
            sudo iw dev "$INTERFACE" set power_save off 2>/dev/null
        fi

        # Start monitoring daemon if available
        if [[ -x "$DAEMON_SCRIPT" ]]; then
            nohup "$DAEMON_SCRIPT" >/dev/null 2>&1 & disown
        fi
    fi
}
wifi_smart_init
unset wifi_smart_init
{{- end }}

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f $ZDOTDIR/p10k.zsh ]] || source $ZDOTDIR/p10k.zsh
